@page "/"
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject WorkerController Worker
@inject LanguageServices LanguageServices
@inject InputOutputCache Cache
@inject TemplateCache TemplateCache
@inject ILogger<Page> Logger

<PageTitle>.NET Lab</PageTitle>

<FluentHeader Class="lab-header" Height="null">
    <div style="flex-grow: 1; justify-content: start">
        @* Logo *@
        @* Need to handle clicks to work around https://github.com/jjonescz/DotNetLab/issues/75. *@
        <a href="/#csharp" style="text-decoration: none" @onclick="@(() => OnLocationChanged("csharp"))">@*
            *@<img style="vertical-align: middle" src="favicon.png" alt="Logo" title=".NET Lab" width="24" height="24" />@*
            *@<span style="margin-left: 0.5em; vertical-align: middle">.NET Lab</span></a>

        @* Input presets (quick-start templates) *@
        <FluentMenuButton Text="Template" Items="WellKnownSlugs.ShorthandToTitle" OnMenuChanged="OnInputPresetSelectedAsync"
        ButtonStyle="margin-left: 0.5em" />
    </div>

    <div>
        @* Compile button *@
        <FluentButton Appearance="Appearance.Accent" OnClick="() => CompileAsync()" Loading="compilationInProgress"
        Title="Compile (Ctrl+S)" IconStart="@(new Icons.Regular.Size20.FlashPlay())">
            Compile
        </FluentButton>

        @* Settings button *@
        <FluentButton OnClick="() => settings.OpenModalAsync()"
        IconStart="@(new Icons.Regular.Size20.Settings())">
            Settings

            @if (UpdateInfo.UpdateIsAvailable)
            {
                <FluentSpacer Width="4" />
                <FluentBadge Appearance="Appearance.Accent" title="Update is available">1</FluentBadge>
            }
        </FluentButton>
    </div>

    <div style="flex-grow: 1">
        <div style="flex-grow: 1; min-width: 10rem">
            @* Outdated output info *@
            @if (outputOutdated)
            {
                <FluentStack title="Output is outdated, click Compile or press Ctrl+S"
                Style="font-size: 0.8rem; font-style: normal; width: auto"
                HorizontalAlignment="HorizontalAlignment.Center">
                    <FluentIcon Value="@(new Icons.Regular.Size20.Save())" Color="Color.Fill" />
                    Ctrl+S to re-compile
                </FluentStack>
            }
            @* Cached info *@
            else if (compiled is (_, _, { } cacheInfo))
            {
                var title = cacheInfo.Timestamp.HasValue
                    ? "The currently displayed output has been fetched from a server cache."
                    : "The currently displayed output comes from a built-in cache.";
                <FluentStack title="@title" Style="font-size: 0.8rem; font-style: normal; width: auto"
                HorizontalAlignment="HorizontalAlignment.Center">
                    <FluentIcon Value="@(new Icons.Regular.Size20.CloudCheckmark())" Color="Color.Fill" />
                    Cached
                    @if (cacheInfo.Timestamp is { } cacheTimestamp)
                    {
                        @cacheTimestamp.ToString("MMM\u00A0d,\u00A0yyyy")
                    }
                    else
                    {
                        @:template
                    }
                </FluentStack>
            }
        </div>

        <div>
            @* Orientation button *@
            @if (orientation == Orientation.Horizontal)
            {
                <FluentButton OnClick="() => orientation = Orientation.Vertical"
                Title="Display editors in a column">
                    <FluentIcon Value="@(new Icons.Regular.Size20.LayoutRowTwo())" Color="Color.Neutral" />
                </FluentButton>
            }
            else
            {
                <FluentButton OnClick="() => orientation = Orientation.Horizontal"
                Title="Display editors in a row">
                    <FluentIcon Value="@(new Icons.Regular.Size20.LayoutColumnTwo())" Color="Color.Neutral" />
                </FluentButton>
            }
        </div>
    </div>
</FluentHeader>

<CascadingValue IsFixed="true" Value="this">
    <Settings @ref="settings" InputEditor="inputEditor" OutputEditor="outputEditor" @bind-WordWrap="wordWrap" @bind-UseVim="useVim" />
</CascadingValue>

@* Input / output panels *@
<FluentMultiSplitter Orientation="orientation" Style="flex-grow: 1; overflow: hidden">
    @* Input panel *@
    <FluentMultiSplitterPane Collapsible>
        <div style="display: flex; flex-direction: column; height: 100%">
            @* Input tabs *@
            <FluentTabs @bind-ActiveTabId="activeInputTabId" @bind-ActiveTabId:after="OnActiveInputTabIdChangedAsync"
            ShowClose="inputs.Count > 1 || configuration != null" OnTabClose="OnInputTabClosedAsync"
            Style="padding: 0 0.2em">
                @* Normal files *@
                @foreach (var (index, input) in inputs.Index())
                {
                    <FluentTab Id="@IndexToInputTabId(index)" Label="@(input.FileName)"
                    LabelEditable LabelChanged="(newName) => OnInputTabRenamedAsync(input, newName)" />
                }

                @* Special configuration file *@
                @if (configuration != null)
                {
                    @* NOTE: Label is shown in the overflow menu, so it needs to be set even though Header is also set. *@
                    <FluentTab Id="@IndexToInputTabId((int)SpecialInput.Configuration)" Label="Configuration">
                        <Header>
                            <FluentIcon Value="@(new Icons.Regular.Size16.DocumentSettings())" />
                            <span style="margin-left: 0.2em">Configuration</span>
                        </Header>
                    </FluentTab>
                }

                @* Add new file button *@
                <div slot="end">
                    <FluentMenuButton IconStart="@(new Icons.Filled.Size20.DocumentAdd())" Text="Add"
                    ButtonAppearance="Appearance.Neutral" OnMenuChanged="OnAddInputTabAsync">
                        <FluentMenuItem Id="cs">.cs</FluentMenuItem>
                        <FluentMenuItem Id="razor">.razor</FluentMenuItem>
                        <FluentMenuItem Id="cshtml">.cshtml</FluentMenuItem>
                        <FluentDivider />
                        <FluentMenuItem Id="config">
                            <FluentIcon Slot="start" Value="@(new Icons.Regular.Size16.DocumentSettings())" />
                            Configuration
                        </FluentMenuItem>
                    </FluentMenuButton>
                </div>
            </FluentTabs>

            @* VIM status bar *@
            <div id="vim-status" class="vim-status-bar" hidden="@(!useVim)" />

            @* Input editor *@
            <div style="flex-grow: 1">
                <BlazorMonaco.Editor.StandaloneCodeEditor @ref="inputEditor" Id="input-editor"
                ConstructionOptions="InputConstructionOptions" OnDidInit="EditorInitAsync"
                OnDidChangeModel="LanguageServices.OnDidChangeModel"
                OnDidChangeModelContent="OnDidChangeModelContent"
                OnDidBlurEditorText="() => SaveStateToUrlAsync()" />
            </div>
        </div>
    </FluentMultiSplitterPane>

    @* Output panel *@
    <FluentMultiSplitterPane Collapsible>
        <div style="display: flex; flex-direction: column; height: 100%">
            @* Worker status message *@
            @if (workerError != null)
            {
                <FluentMessageBar Title="Compiler worker failed." Intent="MessageIntent.Error" AllowDismiss="false">
                    <div style="white-space-collapse: preserve">@workerError</div>
                    <FluentButton Appearance="Appearance.Accent" Style="width: 100%; margin-top: 0.5em" OnClick="ReloadWorker"
                    IconStart="@(new Icons.Regular.Size16.ArrowClockwise())">Re-create the worker</FluentButton>
                </FluentMessageBar>
            }

            @* Output tabs *@
            @* NOTE: @key is needed - otherwise, when AllOutputs change,
            the FluentTabs might render incorrect selected tab
            even though ActiveTabId is set correctly (probably a bug). *@
            <FluentTabs @bind-ActiveTabId="selectedOutputType" @bind-ActiveTabId:after="UpdateOutputDisplayAsync" @key="AllOutputsKey"
            Style="padding: 0 0.2em">
                @foreach (var output in AllOutputs)
                {
                    @* NOTE: Label is shown in the overflow menu, so it needs to be set even though Header is also set. *@
                    <FluentTab Id="@output.Type" Label="@output.Label">
                        <Header>
                            <span>@output.Label</span>

                            @* Error List badge *@
                            @if (output.Type == CompiledAssembly.DiagnosticsOutputType &&
                                compiled?.Output is { } compiledOutput &&
                                compiledOutput is { NumErrors: > 0 } or { NumWarnings: > 0 })
                            {
                                var color = compiledOutput.NumErrors > 0 ? "error" : "warning";
                                <FluentBadge Fill="x" BackgroundColor="@($"var(--{color})")" Color="white" Style="margin-left: 0.4em">
                                    @(compiledOutput.NumErrors > 0 ? compiledOutput.NumErrors : compiledOutput.NumWarnings)
                                </FluentBadge>
                            }
                        </Header>
                    </FluentTab>
                }

                <div slot="end">
                    @* Output loading indicator *@
                    <FluentProgressRing title="Output is loading" Visible="outputLoading" Width="1em" Style="margin-right: 0.2em" />
                </div>
            </FluentTabs>

            @* Output editor *@
            <div style="flex-grow: 1">
                <BlazorMonaco.Editor.StandaloneCodeEditor @ref="outputEditor" Id="output-editor"
                ConstructionOptions="OutputConstructionOptions" />
            </div>
        </div>
    </FluentMultiSplitterPane>
</FluentMultiSplitter>

@code {
    private readonly TaskCompletionSource editorInitialized = new();
    private readonly List<Input> inputs = new();
    private readonly Dictionary<string, EditorState> outputStates = new();
    private bool editorInitializationStarted;
    private DotNetObjectReference<Page>? dotNetObjectReference;
    private Action? unregisterEventListeners;
    private IJSObjectReference module = null!;
    private bool loadedDarkTheme;
    private Input? configuration;
    private string activeInputTabId = IndexToInputTabId(0);
    private StandaloneCodeEditor inputEditor = null!;
    private StandaloneCodeEditor outputEditor = null!;
    private Input? currentInput;
    private EditorState? currentOutput;
    private string? selectedOutputType;
    private bool compilationInProgress;
    private bool outputOutdated;
    private bool outputLoading;
    private (CompilationInput Input, CompiledAssembly Output, CacheInfo? CacheInfo)? compiled;
    private Settings settings = null!;
    private bool wordWrap;
    private bool useVim;
    private Orientation orientation = GetAutoOrientation();
    private string? workerError;

    private record EditorState(TextModel Model) : IAsyncDisposable
    {
        public MonacoEditorViewState ViewState { get; set; }

        public async ValueTask DisposeAsync()
        {
            await Model.DisposeModel();
            await ViewState.DisposeAsync();
        }
    }

    private sealed record Input(string FileName, TextModel Model) : EditorState(Model)
    {
        public string FileName { get; set; } = FileName;
        public string? NewContent { get; set; }
    }

    private readonly record struct CacheInfo(DateTimeOffset? Timestamp);

    private enum SpecialInput
    {
        Configuration = -1,
    }

    private enum Layout
    {
        Split,
        InputOnly,
        OutputOnly,
    }

    private Input? CurrentInput
    {
        get
        {
            var i = InputTabIdToIndex(activeInputTabId);

            if (i < 0 || i >= inputs.Count)
            {
                return null;
            }

            return inputs[i];
        }
    }

    private IEnumerable<CompiledFileOutput> AllOutputs
    {
        get => (CurrentCompiledFile?.Outputs)
            .TryConcat(compiled?.Output.GlobalOutputs);
    }

    private string AllOutputsKey
    {
        get => AllOutputs.Select(o => o.Type).JoinToString(",");
    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        UpdateInfo.UpdateStatusChanged += StateHasChanged;
        ScreenInfo.Updated += OnScreenInfoUpdated;
        Worker.Failed += OnWorkerFailed;

        // Load editor theme early to avoid flash of light theme.
        loadedDarkTheme = ((IJSInProcessRuntime)JSRuntime).Invoke<bool>(
            "eval", """
                (() => {
                    const appSetting = JSON.parse(localStorage.getItem('theme'))?.mode;
                    const systemDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
                    return appSetting === 'dark' || (appSetting !== 'light' && systemDark);
                })()
                """);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        UpdateInfo.UpdateStatusChanged -= StateHasChanged;
        ScreenInfo.Updated -= OnScreenInfoUpdated;
        Worker.Failed -= OnWorkerFailed;

        unregisterEventListeners?.Invoke();

        foreach (var input in inputs)
        {
            await input.DisposeAsync();
        }

        foreach (var outputModel in outputStates.Values)
        {
            await outputModel.DisposeAsync();
        }

        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException) { }
        }

        dotNetObjectReference?.Dispose();
    }

    private async Task OnLocationChanged(string targetSlug)
    {
        currentSlug = targetSlug;
        await LoadStateFromUrlAsync();
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        RefreshCurrentSlug();
        await LoadStateFromUrlAsync();
        StateHasChanged();
    }

    private StandaloneEditorConstructionOptions InputConstructionOptions(StandaloneCodeEditor editor)
    {
        return EditorConstructionOptions(editor, output: false);
    }

    private StandaloneEditorConstructionOptions OutputConstructionOptions(StandaloneCodeEditor editor)
    {
        return EditorConstructionOptions(editor, output: true);
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor, bool output)
    {
        return new()
        {
            AutomaticLayout = true,
            ReadOnly = output,
            // This avoids a virtual keyboard showing up on mobile on the output (readonly) editor.
            DomReadOnly = output,
            WordWrap = wordWrap ? "on" : "off",
            BracketPairColorization = output ? new() { Enabled = false } : null,
            Padding = new() { Top = 10 },
            Theme = GetMonacoTheme(dark: loadedDarkTheme),
            Scrollbar = new()
            {
                // This allows Ctrl+Wheel on the editor to zoom the whole app
                // (not ideal because it also scrolls if possible, but better than nothing).
                AlwaysConsumeMouseWheel = false,
            },
        };
    }

    public static string GetMonacoTheme(bool dark)
    {
        return dark ? "vs-dark" : "vs";
    }

    private async Task OnInputPresetSelectedAsync(MenuChangeEventArgs args)
    {
        if (args.Id is { } slug && NavigateToSlug(slug))
        {
            await LoadStateFromUrlAsync();
        }
    }

    private const string inputTabIdPrefix = "i";

    private static int InputTabIdToIndex(string tabId)
    {
        return TabIdToIndex(inputTabIdPrefix, tabId);
    }

    private static int TabIdToIndex(string prefix, string tabId)
    {
        return int.Parse(tabId.Substring(prefix.Length));
    }

    private static string IndexToInputTabId(int index)
    {
        return IndexToTabId(inputTabIdPrefix, index);
    }

    private static string IndexToTabId(string prefix, int index)
    {
        return $"{prefix}{index}";
    }

    private async Task OnActiveInputTabIdChangedAsync()
    {
        var i = InputTabIdToIndex(activeInputTabId);

        if (i == (int)SpecialInput.Configuration)
        {
            await SelectConfigurationAsync();
        }
        else if (i >= 0 && i < inputs.Count)
        {
            await SelectInputTabAsync(inputs[i], i);
        }
        else
        {
            return;
        }
    }

    private async Task OnInputTabClosedAsync(FluentTab tab)
    {
        await SaveStateToUrlAsync();

        var i = InputTabIdToIndex(tab.Id!);
        var activeInputTabIndex = InputTabIdToIndex(activeInputTabId);

        if (i == (int)SpecialInput.Configuration)
        {
            configuration = null;
        }
        else if (inputs.Count > 1)
        {
            var removedInput = inputs[i];
            inputs.RemoveAt(i);
            await removedInput.DisposeAsync();
        }
        else
        {
            return;
        }

        OnWorkspaceChanged();

        await SaveStateToUrlAsync();
    }

    private async Task OnInputTabRenamedAsync(Input input, string newName)
    {
        await SaveStateToUrlAsync();

        if (input.FileName != newName)
        {
            var oldLanguage = GetLanguageForFileExtension(Path.GetExtension(input.FileName));
            var newLanguage = GetLanguageForFileExtension(Path.GetExtension(newName));

            input.FileName = newName;

            if (oldLanguage != newLanguage)
            {
                await BlazorMonaco.Editor.Global.SetModelLanguage(JSRuntime, input.Model, newLanguage);
            }

            OnWorkspaceChanged();
        }

        await SaveStateToUrlAsync();
    }

    private async Task OnAddInputTabAsync(MenuChangeEventArgs args)
    {
        await SaveStateToUrlAsync();

        if (args.Id == "config")
        {
            await SelectConfigurationAsync();
        }
        else if (args.Id switch
        {
            "cs" => InitialCode.CSharp,
            "razor" => InitialCode.Razor,
            "cshtml" => InitialCode.Cshtml,
            _ => null,
        } is { } initialCode)
        {
            await AddInputAsync(initialCode);
        }
        else
        {
            return;
        }

        await SaveStateToUrlAsync();
    }

    internal async Task SelectConfigurationAsync()
    {
        if (configuration is null)
        {
            await SaveStateToUrlAsync();

            configuration = new(
                InitialCode.Configuration.SuggestedFileName,
                await CreateModelAsync(InitialCode.Configuration.ToInputCode()));
            OnWorkspaceChanged();

            await SaveStateToUrlAsync();
        }

        await SelectInputTabAsync(configuration, (int)SpecialInput.Configuration);
    }

    private async Task SelectInputTabAsync(Input input, int index)
    {
        if (currentInput is { } previousInput)
        {
            previousInput.ViewState = await inputEditor.SaveViewStateAsync(module);
        }

        currentInput = input;

        // Update the editor.
        await inputEditor.SetModel(input.Model);
        await inputEditor.RestoreViewStateAsync(input.ViewState, module);

        // Update the tabs.
        activeInputTabId = IndexToInputTabId(index);

        // Display output corresponding to the selected input.
        await AutoSelectOutputAsync(
            updateTimestampMode: OutputActionMode.IfLazyTextIsResolved,
            storeInCacheMode: OutputActionMode.IfLazyTextIsResolved);
    }

    private async Task AddInputAsync(InitialCode initialCode, bool selectAsCurrent = true)
    {
        var fileName = FindUniqueName(initialCode);
        var inputCode = initialCode.ToInputCode(fileName);
        var model = await CreateModelAsync(inputCode);
        var input = new Input(fileName, model) { NewContent = inputCode.Text };
        inputs.Add(input);
        OnWorkspaceChanged();
        if (selectAsCurrent)
        {
            await SelectInputTabAsync(input, inputs.Count - 1);
        }
    }

    private string FindUniqueName(InitialCode initialCode)
    {
        for (var i = 0; ; i++)
        {
            var suffix = i == 0 ? "" : $"{i}";
            var fileName = initialCode.GetFinalFileName(suffix);
            if (!inputs.Any(i => i.FileName == fileName))
            {
                return fileName;
            }
        }
    }

    [JSInvokable]
    public async Task CompileAndRenderAsync()
    {
        await CompileAsync();
        StateHasChanged();
    }

    private async Task CompileAsync(bool storeInCache = true)
    {
        compilationInProgress = true;

        await RefreshAsync();

        await editorInitialized.Task;

        var state = await SaveStateToUrlAsync();

        // Compile.
        var input = state.ToCompilationInput();
        var output = await Worker.CompileAsync(input);
        compiled = (input, output, null);
        outputOutdated = false;

        await DisplaySquigglesAsync();

        compilationInProgress = false;

        var mode = storeInCache
            ? OutputActionMode.Always
            : OutputActionMode.Never;
        await AutoSelectOutputAsync(
            updateTimestampMode: mode,
            storeInCacheMode: mode);

        // Reset workspace state in case incremental updates were applied incorrectly.
        // We don't want diagnostics from the workspace though, we just set the ones from compiler.
        await ResetWorkspaceAsync(updateDiagnostics: false);
    }

    private void TryStoreInCache(SavedState state, CompiledAssembly output)
    {
        if (!settings.EnableCaching)
        {
            return;
        }

        // No need to cache an input equal to one of those in the built-in cache.
        // Those will never be loaded from the server cache anyway.
        if (TemplateCache.HasInput(state))
        {
            return;
        }

        _ = Cache.StoreAsync(state, output);
    }

    public async Task DisplaySquigglesAsync()
    {
        foreach (var input in inputs)
        {
            List<MarkerData> markers = compiled is { } result ? result.Output.Diagnostics
                .Skip(result.Output.ConfigDiagnosticCount)
                .Where(d => d.FilePath == result.Output.BaseDirectory + input.FileName)
                .Select(d => d.ToMarkerData())
                .ToList() : [];
            await BlazorMonaco.Editor.Global.SetModelMarkers(JSRuntime, input.Model, MonacoConstants.MarkersOwner, markers);
        }

        if (configuration != null)
        {
            if (compiled is { } result)
            {
                List<MarkerData> markers = result.Output.Diagnostics
                    .Take(result.Output.ConfigDiagnosticCount)
                    .Where(d => d.FilePath == "Configuration.cs")
                    .Select(d => d.ToMarkerData())
                    .ToList();
                await BlazorMonaco.Editor.Global.SetModelMarkers(JSRuntime, configuration.Model, MonacoConstants.MarkersOwner, markers);
            }
        }
    }

    private async Task UpdateOutputDisplayAsync()
    {
        await UpdateOutputDisplayAsync(
            updateTimestampMode: OutputActionMode.IfLazyTextIsResolved,
            storeInCacheMode: OutputActionMode.IfLazyTextIsResolved);
    }

    private async Task AutoSelectOutputAsync(
        OutputActionMode updateTimestampMode,
        OutputActionMode storeInCacheMode)
    {
        if (selectedOutputType is null ||
            GetOutput(selectedOutputType) is not { } output ||
            HasEmptyText(output) == true)
        {
            selectedOutputType = !AllOutputs.Any()
                ? null
                : AllOutputs.MaxBy(static o => o.Priority)!.Type;
        }

        await UpdateOutputDisplayAsync(updateTimestampMode, storeInCacheMode);
    }

    enum OutputActionMode
    {
        Never,
        IfLazyTextIsResolved,
        Always,
    }

    private async Task UpdateOutputDisplayAsync(
        OutputActionMode updateTimestampMode,
        OutputActionMode storeInCacheMode)
    {
        if (compiled is null || selectedOutputType is null)
        {
            var state = await saveStateAsync(updateTimestamp: shouldPerformOutputAction(updateTimestampMode, resolvedLazyText: false));
            await setModelAsync("", "", null);
        }
        else
        {
            var compiledOutput = compiled?.Output;
            var outputType = selectedOutputType;
            var output = GetOutput(outputType);
            var (outputText, resolvedLazyText) = await LoadOutputTextAsync(output);
            var state = await saveStateAsync(updateTimestamp: shouldPerformOutputAction(updateTimestampMode, resolvedLazyText));
            await setModelAsync(outputType, outputText, output?.Output.Language);

            if (compiledOutput is not null && shouldPerformOutputAction(storeInCacheMode, resolvedLazyText))
            {
                // If a lazy text has been populated, re-cache.
                TryStoreInCache(state, compiledOutput);
            }
        }

        static bool shouldPerformOutputAction(OutputActionMode mode, bool resolvedLazyText)
        {
            return mode switch
            {
                OutputActionMode.Always => true,
                OutputActionMode.IfLazyTextIsResolved => resolvedLazyText,
                _ => false,
            };
        }

        Task<SavedState> saveStateAsync(bool updateTimestamp)
        {
            return SaveStateToUrlAsync((state) => state with
            {
                // After changing the selected input, we call this method anyway to update outputs,
                // so we can save both selected input and output here.
                SelectedInputIndex = activeInputTabId is { } tabId ? InputTabIdToIndex(tabId) : 0,
                SelectedOutputType = selectedOutputType,

                // If state is going to be cached, update the timestamp so the cache key is unique
                // (it is not possible to overwrite cache entries
                // to prevent anyone changing already shared snippet outputs).
                Timestamp = updateTimestamp ? DateTime.UtcNow : state.Timestamp,
            });
        }

        async Task setModelAsync(string outputType, string text, string? language)
        {
            if (!outputStates.TryGetValue(outputType, out var state))
            {
                state = new(await BlazorMonaco.Editor.Global.CreateModel(JSRuntime, value: text, language: language));
                outputStates[outputType] = state;
            }
            else
            {
                await state.Model.SetValue(text);
                if (language is not null)
                {
                    await BlazorMonaco.Editor.Global.SetModelLanguage(JSRuntime, state.Model, language);
                }
            }

            if (currentOutput is { } previousOutput)
            {
                previousOutput.ViewState = await outputEditor.SaveViewStateAsync(module);
            }

            currentOutput = state;

            await outputEditor.SetModel(state.Model);
            await outputEditor.RestoreViewStateAsync(state.ViewState, module);
        }
    }

    private (CompiledFileOutput Output, string? File)? GetOutput(string type)
    {
        if (CurrentCompiledFile is { } currentCompiledFile)
        {
            if (currentCompiledFile.GetOutput(type) is { } output)
            {
                return (output, CurrentFileName);
            }
        }

        if (compiled?.Output.GetGlobalOutput(type) is { } globalOutput)
        {
            return (globalOutput, null);
        }

        return null;
    }

    private bool? HasEmptyText((CompiledFileOutput Output, string? File)? outputInfo)
    {
        if (TryLoadEagerOutputText(outputInfo, out _, out _, out var text))
        {
            return string.IsNullOrEmpty(text);
        }

        return null;
    }

    private bool TryLoadEagerOutputText((CompiledFileOutput Output, string? File)? outputInfo,
        [NotNullWhen(returnValue: false)] out CompiledFileOutput? output,
        out string? file,
        [NotNullWhen(returnValue: true)] out string? text)
    {
        if (outputInfo is not (var o, var f))
        {
            output = null;
            file = null;
            text = "";
            return true;
        }

        output = o;
        file = f;

        if (output.EagerText is { } eagerText)
        {
            text = eagerText;
            return true;
        }

        text = null;
        return false;
    }

    private async Task<(string Text, bool ResolvedLazyText)> LoadOutputTextAsync((CompiledFileOutput Output, string? File)? outputInfo)
    {
        if (TryLoadEagerOutputText(outputInfo, out var output, out var file, out var eagerText))
        {
            return (eagerText, false);
        }

        if (!outputLoading)
        {
            return await loadAsync(compiled!.Value.Input, file: file, outputType: output.Type);
        }

        return ("", false);

        async Task<(string Text, bool ResolvedLazyText)> loadAsync(CompilationInput input, string? file, string outputType)
        {
            outputLoading = true;
            await RefreshAsync();

            string? result;
            bool success;
            try
            {
                // The text will be cached and loaded synchronously next time (from `output.EagerText`).
                result = await output.GetTextAsync(outputFactory: async () =>
                {
                    return await Worker.GetOutputAsync(input, file: file, outputType: outputType);
                });
                success = true;
            }
            catch (Exception ex)
            {
                result = ex.ToString();
                success = false;
            }

            outputLoading = false;
            StateHasChanged();
            return (result, success);
        }
    }

    private string CurrentFileName => CurrentInput?.FileName ?? "";

    private CompiledFile? CurrentCompiledFile
    {
        get
        {
            return compiled?.Output.Files.TryGetValue(CurrentFileName, out var file) == true
                ? file
                : null;
        }
    }

    private async Task EditorInitAsync()
    {
        // This might get called twice when an editor is hidden and unhidden, or during hot reload,
        // but we don't want to continue initialization in those cases.
        if (editorInitializationStarted)
        {
            return;
        }

        editorInitializationStarted = true;

        module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Lab/Page.razor.js?v=3");
        dotNetObjectReference = DotNetObjectReference.Create(this);
        unregisterEventListeners = await module.InvokeAsync<Action>("registerEventListeners", dotNetObjectReference);

        await settings.InitializeAsync();

        await LoadStateFromUrlAsync();

        if (!editorInitialized.TrySetResult())
        {
            Logger.LogError("Failed to set editor initialized result.");
        }

        if (settings.AutoCompileOnStart && !compilationInProgress)
        {
            // Avoid storing the first auto compilation in cache
            // (the same shared snippet would be stored multiple times unnecessarily and
            // users can always store their snippet separately by compiling manually).
            await CompileAsync(storeInCache: false);
        }
    }

    private async Task<bool> TryLoadFromTemplateCacheAsync(SavedState state, bool updateOutput)
    {
        if (TemplateCache.TryGetOutput(state, out var input, out var output))
        {
            await TrySetCompiledFromCacheAsync(input, output, new(null), updateOutput: updateOutput);
            return true;
        }

        return false;
    }

    private async Task TryLoadFromCacheAsync(SavedState state, bool updateOutput)
    {
        var result = await Cache.LoadAsync(state);
        if (result is var (output, timestamp))
        {
            await TrySetCompiledFromCacheAsync(state.ToCompilationInput(), output, new(timestamp), updateOutput: updateOutput);
            StateHasChanged();
        }
    }

    private async Task TrySetCompiledFromCacheAsync(CompilationInput input, CompiledAssembly output, CacheInfo info, bool updateOutput)
    {
        // If the local compilation finishes before the cache is loaded, don't overwrite it.
        if (compiled is (var existingInput, _, null) && Equals(input, existingInput))
        {
            return;
        }

        compiled = (input, output, info);
        outputOutdated = false;
        StateHasChanged();
        await DisplaySquigglesAsync();

        if (updateOutput)
        {
            await AutoSelectOutputAsync(
                updateTimestampMode: OutputActionMode.Never,
                storeInCacheMode: OutputActionMode.Never);
        }
    }

    private async Task<TextModel> CreateModelAsync(InputCode inputCode)
    {
        return await BlazorMonaco.Editor.Global.CreateModel(
            JSRuntime,
            value: inputCode.Text,
            language: GetLanguageForFileExtension(inputCode.FileExtension),
            // Needs to be unique otherwise renaming this model and then adding an input by the same name would crash.
            uri: $"{Guid.CreateVersion7()}/{inputCode.FileName}");
    }

    private static string? GetLanguageForFileExtension(string extension)
    {
        if (extension.IsRazorFileName())
        {
            return "razor";
        }

        if (extension.IsCSharpFileName())
        {
            return "csharp";
        }

        return null;
    }

    /// <summary>
    /// Should be called before SetModel of Monaco editor whenever (after) <see cref="inputs"/> change.
    /// </summary>
    public void OnWorkspaceChanged()
    {
        outputOutdated = true;

        if (!LanguageServices.Enabled)
        {
            return;
        }

        var models = inputs
            .Select(i => new ModelInfo(Uri: i.Model.Uri, FileName: i.FileName) { NewContent = i.NewContent })
            .ToImmutableArray();
        inputs.ForEach(i => { i.NewContent = null; });
        LanguageServices.OnDidChangeWorkspace(models);
    }

    /// <summary>
    /// Sends the current workspace full state to language services.
    /// </summary>
    public async Task ResetWorkspaceAsync(bool updateDiagnostics = true)
    {
        if (!LanguageServices.Enabled)
        {
            return;
        }

        var models = await inputs
            .SelectAsArrayAsync(static async i => new ModelInfo(Uri: i.Model.Uri, FileName: i.FileName) { NewContent = await i.Model.GetTextAsync() });
        LanguageServices.OnDidChangeWorkspace(models, updateDiagnostics: updateDiagnostics);
    }

    private void OnDidChangeModelContent(ModelContentChangedEvent args)
    {
        outputOutdated = true;
        LanguageServices.OnDidChangeModelContent(args);
    }

    private void OnScreenInfoUpdated()
    {
        orientation = GetAutoOrientation();
        StateHasChanged();
    }

    private static Orientation GetAutoOrientation()
    {
        return ScreenInfo.IsNarrowScreen ? Orientation.Vertical : Orientation.Horizontal; ;
    }

    public void OnSettingsInputChanged()
    {
        outputOutdated = true;
        StateHasChanged();
    }

    private void OnWorkerFailed(string error)
    {
        workerError = error;
        StateHasChanged();
    }

    private void ReloadWorker()
    {
        workerError = null;
        StateHasChanged();
        _ = Worker.RecreateWorkerAsync();
    }
}
