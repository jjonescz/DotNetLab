@implements IDisposable
@inject IJSRuntime JSRuntime
@inject WorkerController Worker
@using Humanizer

<FluentStack Style="font-size: 0.8rem; font-style: normal; width: auto"
HorizontalAlignment="HorizontalAlignment.Center"
VerticalAlignment="VerticalAlignment.Center">
    <span title="@tooltip" @onclick="Refresh">@text</span>
    <FluentButton IconStart="new Icons.Regular.Size20.ArrowDownload()" Title="Download .nettrace file" OnClick="DownloadProfileAsync" />
</FluentStack>

@code {
    private readonly System.Timers.Timer timer = new(TimeSpan.FromSeconds(1)) { AutoReset = true };
    private string? text, tooltip;

    protected override void OnInitialized()
    {
        timer.Elapsed += (s, e) => { Refresh(); };
        timer.Start();
    }

    public void Dispose() => timer.Dispose();

    private void Refresh()
    {
        var appInfo = MemoryUsage.Capture();
        var workerInfo = Worker.LastPingResult?.MemoryUsage;
        long total = appInfo.TotalMemory + (workerInfo?.TotalMemory ?? 0);
        text = total.Bytes().Humanize();
        tooltip = $"App: {appInfo.Info} (click to refresh)\nWorker: {(workerInfo?.Info ?? "N/A")}";
        StateHasChanged();
    }

    private async Task DownloadProfileAsync()
    {
        await JSRuntime.InvokeVoidAsync("eval", "globalThis.getDotnetRuntime(0).collectGcDump();");
    }
}
