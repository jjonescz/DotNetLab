using FluentAssertions;
using System.Text.Json;

namespace DotNetLab;

public sealed class InputOutputCacheTests
{
    [Fact]
    public void BackwardsCompatibility()
    {
        // Do not change this string, we need to ensure it's always successfully parsed
        // to ensure old cached outputs can be opened in new versions of the app.
        // https://lab.razor.fyi/#47Lm4gooyk8vSszVSy4W0g2uLC5JzdVzzs8rzs9J1QsvyixJ9cnMS9VQck5MzkhNUUitSMwtyEnVU9K05vJiLirNi-LkOLT-_ONVqQIsAA
        var response = """
            {"Files":{"Program.cs":{"Outputs":[{"Type":"syntax","Label":"Syntax","Priority":0,"Language":null,"DesignTimeText":null,"EagerText":"CompilationUnit\n\u251C\u2500GlobalStatement\n\u2502 \u2514\u2500ExpressionStatement\n\u2502   \u251C\u2500InvocationExpression\n\u2502   \u2502 \u251C\u2500SimpleMemberAccessExpression\n\u2502   \u2502 \u2502 \u251C\u2500SimpleMemberAccessExpression\n\u2502   \u2502 \u2502 \u2502 \u251C\u2500IdentifierName \u0022System\u0022\n\u2502   \u2502 \u2502 \u2502 \u251C\u2500DotToken \u0022.\u0022\n\u2502   \u2502 \u2502 \u2502 \u2514\u2500IdentifierName \u0022Console\u0022\n\u2502   \u2502 \u2502 \u251C\u2500DotToken \u0022.\u0022\n\u2502   \u2502 \u2502 \u2514\u2500IdentifierName \u0022WriteLine\u0022\n\u2502   \u2502 \u2514\u2500ArgumentList\n\u2502   \u2502   \u251C\u2500OpenParenToken \u0022(\u0022\n\u2502   \u2502   \u251C\u2500Argument\n\u2502   \u2502   \u2502 \u2514\u2500StringLiteralExpression\n\u2502   \u2502   \u2502   \u2514\u2500StringLiteralToken \u0022\u0022Cached example.\u0022\u0022\n\u2502   \u2502   \u2514\u2500CloseParenToken \u0022)\u0022\n\u2502   \u2514\u2500SemicolonToken \u0022;\u0022\n\u2514\u2500EndOfFileToken \u0022\u0022\n"},{"Type":"syntaxTrivia","Label":"Syntax \u002B Trivia","Priority":0,"Language":null,"DesignTimeText":null,"EagerText":"CompilationUnit\n\u251C\u2500GlobalStatement\n\u2502 \u2514\u2500ExpressionStatement\n\u2502   \u251C\u2500InvocationExpression\n\u2502   \u2502 \u251C\u2500SimpleMemberAccessExpression\n\u2502   \u2502 \u2502 \u251C\u2500SimpleMemberAccessExpression\n\u2502   \u2502 \u2502 \u2502 \u251C\u2500IdentifierName\n\u2502   \u2502 \u2502 \u2502 \u2502 \u2514\u2500IdentifierToken \u0022System\u0022\n\u2502   \u2502 \u2502 \u2502 \u251C\u2500DotToken \u0022.\u0022\n\u2502   \u2502 \u2502 \u2502 \u2514\u2500IdentifierName\n\u2502   \u2502 \u2502 \u2502   \u2514\u2500IdentifierToken \u0022Console\u0022\n\u2502   \u2502 \u2502 \u251C\u2500DotToken \u0022.\u0022\n\u2502   \u2502 \u2502 \u2514\u2500IdentifierName\n\u2502   \u2502 \u2502   \u2514\u2500IdentifierToken \u0022WriteLine\u0022\n\u2502   \u2502 \u2514\u2500ArgumentList\n\u2502   \u2502   \u251C\u2500OpenParenToken \u0022(\u0022\n\u2502   \u2502   \u251C\u2500Argument\n\u2502   \u2502   \u2502 \u2514\u2500StringLiteralExpression\n\u2502   \u2502   \u2502   \u2514\u2500StringLiteralToken \u0022\u0022Cached example.\u0022\u0022\n\u2502   \u2502   \u2514\u2500CloseParenToken \u0022)\u0022\n\u2502   \u2514\u2500SemicolonToken \u0022;\u0022\n\u2502     \u2514\u2500TrailingTrivia\n\u2502       \u2514\u2500EndOfLineTrivia \u0022\u23CE\u0022\n\u2514\u2500EndOfFileToken \u0022\u0022\n"},{"Type":"il","Label":"IL","Priority":0,"Language":"csharp","DesignTimeText":null,"EagerText":".class private auto ansi \u0027\u003CModule\u003E\u0027\n{\n} // end of class \u003CModule\u003E\n\n.class private auto ansi beforefieldinit Program\n\textends [System.Runtime]System.Object\n{\n\t.custom instance void [System.Runtime]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = (\n\t\t01 00 00 00\n\t)\n\t// Methods\n\t.method private hidebysig static \n\t\tvoid \u0027\u003CMain\u003E$\u0027 (\n\t\t\tstring[] args\n\t\t) cil managed \n\t{\n\t\t// Method begins at RVA 0x2050\n\t\t// Header size: 1\n\t\t// Code size: 12 (0xc)\n\t\t.maxstack 8\n\t\t.entrypoint\n\n\t\tIL_0000: ldstr \u0022Cached example.\u0022\n\t\tIL_0005: call void [System.Console]System.Console::WriteLine(string)\n\t\tIL_000a: nop\n\t\tIL_000b: ret\n\t} // end of method Program::\u0027\u003CMain\u003E$\u0027\n\n\t.method public hidebysig specialname rtspecialname \n\t\tinstance void .ctor () cil managed \n\t{\n\t\t// Method begins at RVA 0x205d\n\t\t// Header size: 1\n\t\t// Code size: 8 (0x8)\n\t\t.maxstack 8\n\n\t\tIL_0000: ldarg.0\n\t\tIL_0001: call instance void [System.Runtime]System.Object::.ctor()\n\t\tIL_0006: nop\n\t\tIL_0007: ret\n\t} // end of method Program::.ctor\n\n} // end of class Program\n\n"},{"Type":"seq","Label":"Sequence points","Priority":0,"Language":null,"DesignTimeText":null,"EagerText":"\u003CMain\u003E$(IL_0000-IL_000a 20:3-20:40): Console.WriteLine(\u0022Cached example.\u0022);\n\u003CMain\u003E$(IL_000a-IL_000c 21:2-21:3): }\n"},{"Type":"cs","Label":"C#","Priority":0,"Language":"csharp","DesignTimeText":null,"EagerText":"using System;\nusing System.Diagnostics;\nusing System.Reflection;\nusing System.Runtime.CompilerServices;\nusing System.Security;\nusing System.Security.Permissions;\n\n[assembly: CompilationRelaxations(8)]\n[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]\n[assembly: Debuggable(/*Could not decode attribute arguments.*/)]\n[assembly: SecurityPermission(8, SkipVerification = true)]\n[assembly: AssemblyVersion(\u00220.0.0.0\u0022)]\n[module: UnverifiableCode]\n[module: RefSafetyRules(11)]\n[CompilerGenerated]\ninternal class Program\n{\n\tprivate static void \u003CMain\u003E$(string[] args)\n\t{\n\t\tConsole.WriteLine(\u0022Cached example.\u0022);\n\t}\n}\n"},{"Type":"run","Label":"Run","Priority":1,"Language":null,"DesignTimeText":null,"EagerText":"Exit code: 0\nStdout:\nCached example.\n\nStderr:\n"}]}},"GlobalOutputs":[{"Type":"errors","Label":"Error List","Priority":0,"Language":"csharp","DesignTimeText":null,"EagerText":""}],"NumWarnings":0,"NumErrors":0,"Diagnostics":[],"BaseDirectory":"/TestProject/"}
            """;
        var output = JsonSerializer.Deserialize(response, WorkerJsonContext.Default.CompiledAssembly);
        var serialized = JsonSerializer.Serialize(output, WorkerJsonContext.Default.CompiledAssembly);

        // Back-compat breaking changes:
        // 2025-03-15: DesignTimeText has been removed from the output (it is now an input option instead).
        //  This makes it possible to use Razor SG or internal APIs depending on the run/design-time strategy
        //  instead of needing to use both SG and internal API at the same time leading to bad perf.
        response = response.Replace(""","DesignTimeText":null""", null);

        serialized.Should().Be(response);
    }
}
